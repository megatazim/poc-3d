define(["./defaultValue-6195d6e4","./Ellipsoid-9d24693d","./ArcType-198c1070","./buildModuleUrl-89a61082","./Cartesian3-6ab6e817","./Color-7716e146","./ComponentDatatype-9e683007","./Check-d771f3f9","./GeometryAttribute-b7129781","./GeometryAttributes-bc1c2f3f","./IndexDatatype-7f829734","./Math-77022010","./PolylinePipeline-0d83acd5","./PrimitiveType-5db31a9b","./Cartographic-84b54204","./FeatureDetection-d5e675a3","./defer-a21481c0","./Rectangle-f1a1bbf0","./Event-8b63693e","./RuntimeError-3afc2b48","./WebGLConstants-92042d9e","./Cartesian4-da892aa1","./EllipsoidGeodesic-4e69d466","./EllipsoidRhumbLine-7f7a0363","./IntersectionTests-0125ff6b","./Plane-588042d8"],(function(e,t,r,o,a,n,i,l,s,p,c,f,u,y,d,h,g,m,T,v,b,_,B,w,k,E){"use strict";function L(e,t,r,o,a,i,l){var s,p=u.m.numberOfPoints(e,t,a),c=r.red,f=r.green,y=r.blue,d=r.alpha,h=o.red,g=o.green,m=o.blue,T=o.alpha;if(n.e.equals(r,o)){for(s=0;s<p;s++)i[l++]=n.e.floatToByte(c),i[l++]=n.e.floatToByte(f),i[l++]=n.e.floatToByte(y),i[l++]=n.e.floatToByte(d);return l}var v=(h-c)/p,b=(g-f)/p,_=(m-y)/p,B=(T-d)/p,w=l;for(s=0;s<p;s++)i[w++]=n.e.floatToByte(c+s*v),i[w++]=n.e.floatToByte(f+s*b),i[w++]=n.e.floatToByte(y+s*_),i[w++]=n.e.floatToByte(d+s*B);return w}function A(o){var i=(o=e.u(o,e.u.EMPTY_OBJECT)).positions,s=o.colors,p=e.u(o.colorsPerVertex,!1);if(!e.e(i)||i.length<2)throw new l.t("At least two positions are required.");if(e.e(s)&&(p&&s.length<i.length||!p&&s.length<i.length-1))throw new l.t("colors has an invalid length.");this._positions=i,this._colors=s,this._colorsPerVertex=p,this._arcType=e.u(o.arcType,r.L.GEODESIC),this._granularity=e.u(o.granularity,f.e.RADIANS_PER_DEGREE),this._ellipsoid=e.u(o.ellipsoid,t.t.WGS84),this._workerName="createSimplePolylineGeometry";var c=1+i.length*a.o.packedLength;c+=e.e(s)?1+s.length*n.e.packedLength:1,this.packedLength=c+t.t.packedLength+3}A.pack=function(r,o,i){if(!e.e(r))throw new l.t("value is required");if(!e.e(o))throw new l.t("array is required");i=e.u(i,0);var s,p=r._positions,c=p.length;for(o[i++]=c,s=0;s<c;++s,i+=a.o.packedLength)a.o.pack(p[s],o,i);var f=r._colors;for(c=e.e(f)?f.length:0,o[i++]=c,s=0;s<c;++s,i+=n.e.packedLength)n.e.pack(f[s],o,i);return t.t.pack(r._ellipsoid,o,i),i+=t.t.packedLength,o[i++]=r._colorsPerVertex?1:0,o[i++]=r._arcType,o[i]=r._granularity,o},A.unpack=function(r,o,i){if(!e.e(r))throw new l.t("array is required");o=e.u(o,0);var s,p=r[o++],c=new Array(p);for(s=0;s<p;++s,o+=a.o.packedLength)c[s]=a.o.unpack(r,o);var f=(p=r[o++])>0?new Array(p):void 0;for(s=0;s<p;++s,o+=n.e.packedLength)f[s]=n.e.unpack(r,o);var u=t.t.unpack(r,o);o+=t.t.packedLength;var y=1===r[o++],d=r[o++],h=r[o];return e.e(i)?(i._positions=c,i._colors=f,i._ellipsoid=u,i._colorsPerVertex=y,i._arcType=d,i._granularity=h,i):new A({positions:c,colors:f,ellipsoid:u,colorsPerVertex:y,arcType:d,granularity:h})};var P=new Array(2),D=new Array(2),C={positions:P,height:D,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return A.createGeometry=function(t){var l,d,h,g,m,T=t._positions,v=t._colors,b=t._colorsPerVertex,_=t._arcType,B=t._granularity,w=t._ellipsoid,k=f.e.chordLength(B,w.maximumRadius),E=e.e(v)&&!b,A=T.length,G=0;if(_===r.L.GEODESIC||_===r.L.RHUMB){var x,I,R;_===r.L.GEODESIC?(x=f.e.chordLength(B,w.maximumRadius),I=u.m.numberOfPoints,R=u.m.generateArc):(x=B,I=u.m.numberOfPointsRhumbLine,R=u.m.generateRhumbArc);var S=u.m.extractHeights(T,w),O=C;if(_===r.L.GEODESIC?O.minDistance=k:O.granularity=B,O.ellipsoid=w,E){var U=0;for(l=0;l<A-1;l++)U+=I(T[l],T[l+1],x)+1;d=new Float64Array(3*U),g=new Uint8Array(4*U),O.positions=P,O.height=D;var V=0;for(l=0;l<A-1;++l){P[0]=T[l],P[1]=T[l+1],D[0]=S[l],D[1]=S[l+1];var q=R(O);if(e.e(v)){var N=q.length/3;m=v[l];for(var F=0;F<N;++F)g[V++]=n.e.floatToByte(m.red),g[V++]=n.e.floatToByte(m.green),g[V++]=n.e.floatToByte(m.blue),g[V++]=n.e.floatToByte(m.alpha)}d.set(q,G),G+=q.length}}else if(O.positions=T,O.height=S,d=new Float64Array(R(O)),e.e(v)){for(g=new Uint8Array(d.length/3*4),l=0;l<A-1;++l){G=L(T[l],T[l+1],v[l],v[l+1],k,g,G)}var M=v[A-1];g[G++]=n.e.floatToByte(M.red),g[G++]=n.e.floatToByte(M.green),g[G++]=n.e.floatToByte(M.blue),g[G++]=n.e.floatToByte(M.alpha)}}else{h=E?2*A-2:A,d=new Float64Array(3*h),g=e.e(v)?new Uint8Array(4*h):void 0;var H=0,W=0;for(l=0;l<A;++l){var Y=T[l];if(E&&l>0&&(a.o.pack(Y,d,H),H+=3,m=v[l-1],g[W++]=n.e.floatToByte(m.red),g[W++]=n.e.floatToByte(m.green),g[W++]=n.e.floatToByte(m.blue),g[W++]=n.e.floatToByte(m.alpha)),E&&l===A-1)break;a.o.pack(Y,d,H),H+=3,e.e(v)&&(m=v[l],g[W++]=n.e.floatToByte(m.red),g[W++]=n.e.floatToByte(m.green),g[W++]=n.e.floatToByte(m.blue),g[W++]=n.e.floatToByte(m.alpha))}}var z=new p.a;z.position=new s.o({componentDatatype:i.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:d}),e.e(v)&&(z.color=new s.o({componentDatatype:i.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:g,normalize:!0}));var J=2*((h=d.length/3)-1),j=c.IndexDatatype.createTypedArray(h,J),K=0;for(l=0;l<h-1;++l)j[K++]=l,j[K++]=l+1;return new s.I({attributes:z,indices:j,primitiveType:y._0x1da42a.LINES,boundingSphere:o.i.fromPoints(T)})},function(r,o){return e.e(o)&&(r=A.unpack(r,o)),r._ellipsoid=t.t.clone(r._ellipsoid),A.createGeometry(r)}}));
