define(["./defaultValue-6195d6e4","./Ellipsoid-9d24693d","./arrayRemoveDuplicates-a80848e1","./BoundingRectangle-330469e1","./buildModuleUrl-89a61082","./Cartesian3-6ab6e817","./ComponentDatatype-9e683007","./PolylineVolumeGeometryLibrary-f8406ae5","./Check-d771f3f9","./GeometryAttribute-b7129781","./GeometryAttributes-bc1c2f3f","./GeometryPipeline-e9b54c6d","./IndexDatatype-7f829734","./Math-77022010","./oneTimeWarning-264f08dd","./PolygonPipeline-5d307ca1","./PrimitiveType-5db31a9b","./VertexFormat-8dc15345","./Cartographic-84b54204","./Rectangle-f1a1bbf0","./FeatureDetection-d5e675a3","./defer-a21481c0","./Event-8b63693e","./RuntimeError-3afc2b48","./WebGLConstants-92042d9e","./Cartesian4-da892aa1","./EllipsoidTangentPlane-f8d45d42","./IntersectionTests-0125ff6b","./Plane-588042d8","./PolylinePipeline-0d83acd5","./EllipsoidGeodesic-4e69d466","./EllipsoidRhumbLine-7f7a0363","./AttributeCompression-f1ba21d8","./EncodedCartesian3-aa410950"],(function(e,t,n,o,a,i,r,s,p,l,c,u,d,y,g,h,m,f,v,b,k,_,P,L,w,E,C,A,D,T,F,R,G,x){"use strict";function O(n){var o=(n=e.u(n,e.u.EMPTY_OBJECT)).polylinePositions,a=n.shapePositions;if(!e.e(o))throw new p.t("options.polylinePositions is required.");if(!e.e(a))throw new p.t("options.shapePositions is required.");this._positions=o,this._shape=a,this._ellipsoid=t.t.clone(e.u(n.ellipsoid,t.t.WGS84)),this._cornerType=e.u(n.cornerType,s.S.ROUNDED),this._vertexFormat=f.n.clone(e.u(n.vertexFormat,f.n.DEFAULT)),this._granularity=e.u(n.granularity,y.e.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",this.enuCenter=e.u(n.enuCenter,i.o.ZERO);var r=1+o.length*i.o.packedLength;r+=1+a.length*t.o.packedLength+i.o.packedLength,this.packedLength=r+t.t.packedLength+f.n.packedLength+2}O.pack=function(n,o,a){if(!e.e(n))throw new p.t("value is required");if(!e.e(o))throw new p.t("array is required");a=e.u(a,0);var r,s=n._positions,l=s.length;for(o[a++]=l,r=0;r<l;++r,a+=i.o.packedLength)i.o.pack(s[r],o,a);var c=n._shape;for(l=c.length,o[a++]=l,r=0;r<l;++r,a+=t.o.packedLength)t.o.pack(c[r],o,a);return t.t.pack(n._ellipsoid,o,a),a+=t.t.packedLength,f.n.pack(n._vertexFormat,o,a),a+=f.n.packedLength,o[a++]=n._cornerType,o[a++]=n._granularity,i.o.pack(n.enuCenter,o,a),o};var I=t.t.clone(t.t.UNIT_SPHERE),S=new f.n,q={polylinePositions:void 0,shapePositions:void 0,ellipsoid:I,vertexFormat:S,cornerType:void 0,granularity:void 0,enuCenter:void 0};O.unpack=function(n,o,a){if(!e.e(n))throw new p.t("array is required");o=e.u(o,0);var r,s=n[o++],l=new Array(s);for(r=0;r<s;++r,o+=i.o.packedLength)l[r]=i.o.unpack(n,o);s=n[o++];var c=new Array(s);for(r=0;r<s;++r,o+=t.o.packedLength)c[r]=t.o.unpack(n,o);var u=t.t.unpack(n,o,I);o+=t.t.packedLength;var d=f.n.unpack(n,o,S);o+=f.n.packedLength;var y,g=n[o++],h=n[o++];return y=i.o.unpack(n,o),e.e(a)?(a._positions=l,a._shape=c,a._ellipsoid=t.t.clone(u,a._ellipsoid),a._vertexFormat=f.n.clone(d,a._vertexFormat),a._cornerType=g,a._granularity=h,a.enuCenter=y,a):(q.polylinePositions=l,q.shapePositions=c,q.cornerType=g,q.granularity=h,q.enuCenter=y,new O(q))};var N=new o.f;return O.createGeometry=function(t){for(var p=t._positions,y=n.D(p,i.o.equalsEpsilon),f=y.length,v=new Array(f),b=0;b<f;b++)v[b]=i.o.clone(y[b]);var k=t._shape;if(k=s.J.removeDuplicatesFromShape(k),!(y.length<2||k.length<3)){h.A.computeWindingOrder2D(k)===h.W.CLOCKWISE&&k.reverse();var _=o.f.fromPoints(k,N),P={};if(P.combinedPositions=s.J.computePositions(v,k,_,t,!0),!i.o.equals(t.enuCenter,i.o.ZERO)){var L=new Array(f);for(b=0;b<f;b++)L[b]=i.o.clone(y[b]);P.combinedLocalPositions=s.J.computeLocalPositions(L,k,_,t,!0,t.enuCenter)}return function(t,n,o,i){var s=t.combinedPositions,p=t.combinedLocalPositions,y=new c.a;i.position&&(y.position=new l.o({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:s}));var f,v,b,k,_,P,L=n.length,w=s.length/3,E=(w-2*L)/(2*L),C=h.A.triangulate(n),A=(E-1)*L*6+2*C.length,D=d.IndexDatatype.createTypedArray(w,A),T=2*L,F=0;for(f=0;f<E-1;f++){for(v=0;v<L-1;v++)P=(b=2*v+f*L*2)+T,_=(k=b+1)+T,D[F++]=k,D[F++]=b,D[F++]=_,D[F++]=_,D[F++]=b,D[F++]=P;_=(k=1+(b=2*L-2+f*L*2))+T,P=b+T,D[F++]=k,D[F++]=b,D[F++]=_,D[F++]=_,D[F++]=b,D[F++]=P}if(i.st||i.tangent||i.bitangent){var R,G,x=new Float32Array(2*w),O=1/(E-1),I=1/o.height,S=o.height/2,q=0;for(f=0;f<E;f++){for(R=f*O,G=I*(n[0].y+S),x[q++]=R,x[q++]=G,v=1;v<L;v++)G=I*(n[v].y+S),x[q++]=R,x[q++]=G,x[q++]=R,x[q++]=G;G=I*(n[0].y+S),x[q++]=R,x[q++]=G}for(v=0;v<L;v++)R=0,G=I*(n[v].y+S),x[q++]=R,x[q++]=G;for(v=0;v<L;v++)R=(E-1)*O,G=I*(n[v].y+S),x[q++]=R,x[q++]=G;y.st=new l.o({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(x)})}var N=w-2*L;for(f=0;f<C.length;f+=3){var U=C[f]+N,W=C[f+1]+N,V=C[f+2]+N;D[F++]=U,D[F++]=W,D[F++]=V,D[F++]=V+L,D[F++]=W+L,D[F++]=U+L}var B=new l.I({attributes:y,indices:D,boundingSphere:a.i.fromVertices(s),primitiveType:m._0x1da42a.TRIANGLES});if(i.normal&&(B=u.k.computeNormal(B)),i.tangent||i.bitangent){try{B=u.k.computeTangentAndBitangent(B)}catch(e){g.e("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}i.tangent||(B.attributes.tangent=void 0),i.bitangent||(B.attributes.bitangent=void 0),i.st||(B.attributes.st=void 0)}return e.e(p)&&(B.attributes.position.values=p,B.attributes.position.componentDatatype=r.ComponentDatatype.FLOAT),B}(P,k,_,t._vertexFormat)}},function(n,o){return e.e(o)&&(n=O.unpack(n,o)),n._ellipsoid=t.t.clone(n._ellipsoid),O.createGeometry(n)}}));
